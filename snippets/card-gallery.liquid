{%- doc -%}
  Displays product images in a carousel.
  Settings allow for a full slideshow, showing only the first image, or showing the second image when hovering.
  Note: When the product card itself is in a carousel layout, the card-gallery's carousel is disabled with JavaScript.

  @param [children] - Additional content rendered below the card gallery
  @param [section] - The section object the snippet is rendered in
  @param [block] - The block object the snippet is rendered in
  @param [variant] - The variant object
{%- enddoc -%}

{% liquid
  assign image_sizes = '(min-width: 750px) 50vw, 100vw'
  # if the card-gallery has a section.settings.product_card_size:
  # assume grid-template autofill(card-size, 1fr) and calculate the sizes attribute based on the minimum card size

  # if section has section.settings.columns:
  # assume grid-template repeat(column-count, 1fr) and calculate the sizes attribute based on the number of columns
%}

{% if section.settings.product_card_size %}
  {% capture card_size %}
    {% render 'util-product-grid-card-size' section: section %}
  {% endcapture %}
  {% assign card_size = card_size | strip | replace: 'px', '' | plus: 0 %}
  {% capture sizes_attribute %}
    {% render 'util-autofill-img-size-attr' card_size: card_size, card_gap: section.settings.columns_gap_horizontal %}
  {% endcapture %}
  {% assign image_sizes = sizes_attribute | strip %}
{% elsif section.settings.columns and section.settings.layout_type != 'editorial' %}
  {% assign viewport_width = 100.0 | divided_by: section.settings.columns %}
  {% assign sizes_attribute = '(min-width: 750px) [viewport_width]vw, 100vw'
    | replace: '[viewport_width]', viewport_width
  %}
  {% assign image_sizes = sizes_attribute | strip %}
{% endif %}

{% liquid
  # Explicitly determine product and variant
  assign product = closest.product
  assign current_variant = blank
  if variant != blank
    assign current_variant = variant
  endif

  assign lazy_image_sizes = 'auto, ' | append: image_sizes

  assign image_ratio_setting = block.settings.image_ratio
  assign temp_ratio = 1

  # Determine image aspect ratio based on settings and available images
  if image_ratio_setting == 'landscape'
    assign temp_ratio = '16 / 9'
  elsif image_ratio_setting == 'portrait'
    assign temp_ratio = '4 / 5'
  elsif image_ratio_setting == 'square'
    assign temp_ratio = '1'
  elsif image_ratio_setting == 'adapt'
    # Use variant image aspect ratio if available
    if current_variant != blank and current_variant.image != blank and current_variant.image.aspect_ratio != null and current_variant.image.aspect_ratio > 0
      assign temp_ratio = current_variant.image.aspect_ratio
    # Otherwise, use product featured image aspect ratio
    elsif product != blank
      assign current_featured_image_for_ratio = product.featured_image
      if current_featured_image_for_ratio == blank and product.featured_media.preview_image != blank
        assign current_featured_image_for_ratio = product.featured_media.preview_image
      endif
      if current_featured_image_for_ratio != blank and current_featured_image_for_ratio.aspect_ratio != null and current_featured_image_for_ratio.aspect_ratio > 0
        assign temp_ratio = current_featured_image_for_ratio.aspect_ratio
      endif
    endif
  endif

  # Fallback to 1 if no valid ratio found
  if temp_ratio != blank and temp_ratio != 0 and temp_ratio != ''
    assign ratio = temp_ratio
  else
    assign ratio = 1
  endif

  # Get appropriate images/media for the gallery
  assign gallery_media = '' | split: ','

  # Priority: variant featured media > product media > product images
  if current_variant != blank and current_variant.featured_media != blank
    assign gallery_media = current_variant.featured_media
  elsif current_variant.featured_media == blank and product != blank and product.media != blank and product.media.size > 0
    assign gallery_media = product.media
  elsif current_variant.featured_media == blank and product != blank and product.images != blank and product.images.size > 0
    assign gallery_media = product.images
  endif

  # Get appropriate title for the gallery
  assign gallery_title = blank
  if current_variant != blank and current_variant.title != blank
    assign gallery_title = current_variant.title
  elsif product != blank and product.title != blank
    assign gallery_title = product.title
  endif

  # Get variant images if available
  assign variant_images = blank
  if product != blank and product.images != blank
    assign variant_images = product.images | where: 'attached_to_variant?', true | map: 'src'
  endif
  assign selected_variant_image = blank
  if current_variant != blank and current_variant.image != blank
    assign selected_variant_image = current_variant.image.src
  elsif product != blank and product.selected_or_first_available_variant != blank and product.selected_or_first_available_variant.image != blank
    assign selected_variant_image = product.selected_or_first_available_variant.image.src
  endif
  assign selected_variant_image_index = 0
  # Find the index of the selected variant image in gallery_images
  if gallery_images != blank and selected_variant_image != blank
    for image in gallery_images
      if image.src == selected_variant_image
        assign selected_variant_image_index = forloop.index0
      endif
    endfor
  endif

  assign hover_behavior = 'carousel'

  # If using 'adapt' ratio and constrain_to_viewport is set, apply media_fit
  if block.settings.image_ratio == 'adapt' and block.settings.constrain_to_viewport
    if block.settings.constrain_to_viewport != ''
      assign constrain_to_viewport = true
      assign media_fit = block.settings.constrain_to_viewport
    endif
  endif
%}

{% capture placeholder_image %}
  <placeholder-image data-block-id="{{ section.id }}-{{ block.id }}" data-type="product"></placeholder-image>
{% endcapture %}
{% capture placeholder_slide %}
  {% render 'slideshow-slide', index: 1, children: placeholder_image, class: 'product-media-container card-gallery__placeholder' %}
{% endcapture %}
{% capture slideshow_placeholder %}
  {% render 'slideshow', ref: 'slideshow', slides: placeholder_slide, slide_count: 1, attributes: 'disabled="true"' %}
{% endcapture %}

<div
  ref="cardGallery"
  class="
    card-gallery card-gallery-{{ block.id }} spacing-style border-style
    {% if closest.product == blank and request.design_mode == false %}hidden{% endif %}
  "
  style="
    {% render 'border-override', settings: block.settings %}
    {% render 'spacing-style', settings: block.settings %}
    --gallery-aspect-ratio: {{ ratio }};
  "
  data-product-id="{{ product.id }}"
  {% if settings.show_second_image_on_hover %}
    on:pointerenter="/previewImage"
    on:pointerleave="/resetImage"
  {% endif %}
  {% if settings.transition_to_main_product %}
    data-view-transition-to-main-product
  {% endif %}
  data-image-ratio="{{ block.settings.image_ratio }}"
  {{ block.shopify_attributes }}
>
  {% assign all_media = gallery_media %}

  {% comment %}
    For combined listings, also make sure to include the featured media of the color variants so that the swatch picker
    works as expected.
  {% endcomment %}
  {% if product != blank and variant == blank %}
    {% for product_option in product.options_with_values %}
      {% for product_option_value in product_option.values %}
        {% if product_option_value.swatch %}
          {% assign featured_media = product_option_value.variant.featured_media %}

          {% comment %}
            If the variant has no featured media, and we have a combined listing product, then fall back to using the
            featured media of the child product that is linked to this option value.
          {% endcomment %}
          {% if featured_media == blank and product_option_value.product_url %}
            {% assign featured_media = product_option_value.variant.product.featured_media %}
          {% endif %}

          {% assign existing_media = all_media | has: 'id', featured_media.id %}
          {% unless existing_media %}
            {% assign variant_featured_media = product_option_value.variant.product.media
              | where: 'id', featured_media.id
            %}
            {% assign all_media = all_media | concat: variant_featured_media %}
          {% endunless %}
        {% endif %}
      {% endfor %}
    {% endfor %}
  {% endif %}

  {% liquid
    # Sort media so selected variant image comes first
    assign selected_media = blank
    assign other_media = blank
    assign all_media_sorted = blank
    if all_media != blank and selected_variant_image != blank
      assign selected_media = all_media | where: 'src', selected_variant_image
      assign other_media = all_media | reject: 'src', selected_variant_image
      assign all_media_sorted = selected_media | concat: other_media
    else
      assign all_media_sorted = all_media
    endif
    # Check if there are generic media that are not variant images
    assign has_generic_media = false
    # If the number of all media is greater than the number of variant images, there are generic media
    if all_media_sorted != blank and variant_images != blank and all_media_sorted.size > variant_images.size
      assign has_generic_media = true
    endif
    # Create an intermediate variable for the condition: gallery_title != blank and (gallery_media == blank or gallery_media.size == 0)
    assign no_gallery_media = false
    if gallery_media == blank or gallery_media.size == 0
      assign no_gallery_media = true
    endif
  %}

  {%- if all_media != blank and all_media.size > 0 -%}
    {% if all_media.size > 2 and hover_behavior == 'carousel' %}
      {% assign show_arrows = true %}
    {% endif %}

    {% capture slides %}
        {% assign has_valid_media = false %}
        {% for media in all_media_sorted %}
          {{ media.src }}
          {% if media != blank %}
            {% assign has_valid_media = true %}
          {% endif %}
        {% endfor %}

        {% if has_valid_media %}
          {% for media in all_media_sorted %}
            {% if media != blank %}
              {% assign loading = 'lazy' %}
              {% assign sizes = lazy_image_sizes %}
              {% if forloop.first and section.index == nil or section.index < 5 %}
                {% assign loading = 'eager' %}
                {% assign sizes = image_sizes %}
              {% endif %}
              {% assign attributes = '' %}
              {% capture slideshow_children %}
                {%- render 'product-media', media: media, sizes: sizes, loading: loading, preview_image_only: true -%}
              {% endcapture %}
              {% capture class %}
                product-media-container media-fit product-media-container--{{ media.media_type }}{% if constrain_to_viewport %} constrain-height{% endif %}
              {% endcapture %}
              {% assign hidden = false %}
              {% comment %} Hide variant images except the first one if there are generic media {% endcomment %}
              {% if variant_images contains media.src %}
                {% assign attributes = 'variant-image' %}
                {% unless forloop.first and media.src == selected_variant_image or has_generic_media == false %}
                  {% assign hidden = true %}
                {% endunless %}
              {% endif %}
              {% render 'slideshow-slide', slide_id: media.id, index: forloop.index, children: slideshow_children, class: class, attributes: attributes, hidden: hidden, media_fit: media_fit %}
            {% endif %}
          {% endfor %}
        {% else %}
          {{ slideshow_placeholder }}
        {% endif %}
    {% endcapture %}

    {% assign slideshow_attributes = '' %}
    {% if hover_behavior == 'none' or settings.product_card_carousel == false %}
      {% assign slideshow_attributes = 'disabled="true"' %}
    {% endif %}
    {% render 'slideshow',
      ref: 'slideshow',
      initial_slide: selected_variant_image_index,
      slides: slides,
      slide_count: all_media.size,
      show_arrows: show_arrows,
      attributes: slideshow_attributes
    %}
  {% elsif gallery_title != blank and no_gallery_media %}
    <product-title class="product-card-gallery__title-placeholder">
      <span class="title-text">{{- gallery_title -}}</span>
    </product-title>
  {% elsif product == blank %}
    {{ slideshow_placeholder }}
  {%- endif -%}
  {{ children }}
</div>

{% stylesheet %}
  .card-gallery {
    overflow: hidden;
    container-type: inline-size; /* Make card-gallery a container */
    container-name: card-gallery-container; /* Optional: name the container */
  }

  .card-gallery__placeholder svg {
    height: 100%;
    width: 100%;
  }

  .card-gallery placeholder-image {
    aspect-ratio: var(--gallery-aspect-ratio, var(--ratio));
  }

  .product-card-gallery__title-placeholder {
    padding: var(--padding-md);
    font-size: var(--font-size--2xl);
    line-height: var(--line-height--display-loose);
    word-break: break-word;
    color: var(--color-foreground);
    background-color: rgb(from var(--color-foreground) r g b / 5%);
    aspect-ratio: var(--gallery-aspect-ratio);
    border-radius: var(--product-corner-radius);
    display: -webkit-box;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  @media screen and (min-width: 750px) {
    .product-grid[data-product-card-size='extra-large'] .product-card-gallery__title-placeholder {
      padding: var(--padding-3xl);
      font-size: var(--font-size--3xl);
    }

    .product-grid[data-product-card-size='large'] .product-card-gallery__title-placeholder {
      padding: var(--padding-2xl);
      font-size: var(--font-size--2xl);
    }

    .product-grid[data-product-card-size='medium'] .product-card-gallery__title-placeholder {
      padding: var(--padding-xl);
      font-size: var(--font-size--xl);
    }

    .product-grid[data-product-card-size='small'] .product-card-gallery__title-placeholder {
      padding: var(--padding-sm);
      font-size: var(--font-size--lg);
    }

    .product-grid[data-product-card-size='extra-large']
      .card-gallery:has(.product-badges--top-right .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-right: calc(var(--padding-3xl) + 50px);
    }

    .product-grid[data-product-card-size='large']
      .card-gallery:has(.product-badges--top-right .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-right: calc(var(--padding-2xl) + 50px);
    }

    .product-grid[data-product-card-size='medium']
      .card-gallery:has(.product-badges--top-right .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-right: calc(var(--padding-xl) + 50px);
    }

    .product-grid[data-product-card-size='small']
      .card-gallery:has(.product-badges--top-right .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-right: calc(var(--padding-sm) + 50px);
    }

    .product-grid[data-product-card-size='extra-large']
      .card-gallery:has(.product-badges--top-left .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-top: calc(var(--padding-3xl) + 40px);
    }

    .product-grid[data-product-card-size='large']
      .card-gallery:has(.product-badges--top-left .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-top: calc(var(--padding-2xl) + 40px);
    }

    .product-grid[data-product-card-size='medium']
      .card-gallery:has(.product-badges--top-left .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-top: calc(var(--padding-xl) + 40px);
    }

    .product-grid[data-product-card-size='small']
      .card-gallery:has(.product-badges--top-left .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-top: calc(var(--padding-sm) + 40px);
    }

    .product-grid[data-product-card-size='extra-large']
      .card-gallery:has(.product-badges--bottom-left .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-bottom: calc(var(--padding-3xl) + 40px);
    }

    .product-grid[data-product-card-size='large']
      .card-gallery:has(.product-badges--bottom-left .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-bottom: calc(var(--padding-2xl) + 40px);
    }

    .product-grid[data-product-card-size='medium']
      .card-gallery:has(.product-badges--bottom-left .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-bottom: calc(var(--padding-xl) + 40px);
    }

    .product-grid[data-product-card-size='small']
      .card-gallery:has(.product-badges--bottom-left .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-bottom: calc(var(--padding-sm) + 40px);
    }
  }

  @media screen and (max-width: 749px) {
    .product-card-gallery__title-placeholder {
      font-size: var(--font-size--xl);
      padding: var(--padding-md);
    }

    .product-grid[data-product-card-size]
      .card-gallery:has(.product-badges--top-right .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-right: calc(var(--padding-sm) + 50px);
    }

    .product-grid[data-product-card-size]
      .card-gallery:has(.product-badges--top-left .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-top: calc(var(--padding-sm) + 40px);
    }

    .product-grid[data-product-card-size]
      .card-gallery:has(.product-badges--bottom-left .product-badges__badge)
      .product-card-gallery__title-placeholder {
      padding-bottom: calc(var(--padding-sm) + 40px);
    }
  }

  [product-grid-view='zoom-out'] .card-gallery .product-card-gallery__title-placeholder {
    padding: var(--padding-xs) !important;
    font-size: var(--font-size--xs);
  }
{% endstylesheet %}
